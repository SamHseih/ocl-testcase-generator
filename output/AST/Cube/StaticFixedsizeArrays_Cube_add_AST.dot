digraph AST {
  node [shape=box];
  n71 [label="ContextDecl: node(9) Context: node (70)", xlabel="(71)"];
  n71 -> n9;
  n71 -> n70;
  n9 [label="Cube::add(node (8)) : Cube", xlabel="(9)"];
  n9 -> n8;
  n70 [label=" post:", xlabel="(70)Boolean"];
  n70 -> n69;
  n8 [label="arg : Cube", xlabel="(8)Cube"];
  n69 [label="LetExp 
Let node(15), node(21), node(27), node(68) in node(68)", xlabel="(69)Boolean"];
  n69 -> n15;
  n69 -> n21;
  n69 -> n27;
  n69 -> n68;
  n15 [label="=", xlabel="(15)Boolean"];
  n15 -> n14;
  n15 -> n13;
  n21 [label="=", xlabel="(21)Boolean"];
  n21 -> n20;
  n21 -> n19;
  n27 [label="=", xlabel="(27)Boolean"];
  n27 -> n26;
  n27 -> n25;
  n68 [label="IterateExp
source=node(30) Iterator=node(31)
Result=node(34) Body=node(67)", xlabel="(68)Boolean"];
  n68 -> n30;
  n68 -> n31;
  n68 -> n34;
  n68 -> n67;
  n14 [label="dim1 : int", xlabel="(14)int"];
  n13 [label="arg.data.getDimensionSizes(1)", xlabel="(13)int"];
  n13 -> n11;
  n13 -> n12;
  n20 [label="dim2 : int", xlabel="(20)int"];
  n19 [label="arg.data.getDimensionSizes(2)", xlabel="(19)int"];
  n19 -> n17;
  n19 -> n18;
  n26 [label="dim3 : int", xlabel="(26)int"];
  n25 [label="arg.data.getDimensionSizes(3)", xlabel="(25)int"];
  n25 -> n23;
  n25 -> n24;
  n30 [label="Sequence{ node(28) .. node(29) }", xlabel="(30)int"];
  n30 -> n28;
  n30 -> n29;
  n31 [label="it : int", xlabel="(31)int"];
  n34 [label="=", xlabel="(34)Boolean"];
  n34 -> n33;
  n34 -> n32;
  n67 [label="IterateExp
source=node(37) Iterator=node(38)
Result=node(41) Body=node(66)", xlabel="(67)Boolean"];
  n67 -> n37;
  n67 -> n38;
  n67 -> n41;
  n67 -> n66;
  n11 [label="arg.data", xlabel="(11)int[1][2][4]"];
  n11 -> n10;
  n12 [label="1", xlabel="(12)int"];
  n17 [label="arg.data", xlabel="(17)int[1][2][4]"];
  n17 -> n16;
  n18 [label="2", xlabel="(18)int"];
  n23 [label="arg.data", xlabel="(23)int[1][2][4]"];
  n23 -> n22;
  n24 [label="3", xlabel="(24)int"];
  n28 [label="1", xlabel="(28)int"];
  n29 [label="dim1", xlabel="(29)int"];
  n33 [label="acc : Boolean", xlabel="(33)Boolean"];
  n32 [label="true", xlabel="(32)Boolean"];
  n37 [label="Sequence{ node(35) .. node(36) }", xlabel="(37)int"];
  n37 -> n35;
  n37 -> n36;
  n38 [label="it2 : int", xlabel="(38)int"];
  n41 [label="=", xlabel="(41)Boolean"];
  n41 -> n40;
  n41 -> n39;
  n66 [label="IterateExp
source=node(44) Iterator=node(45)
Result=node(48) Body=node(65)", xlabel="(66)Boolean"];
  n66 -> n44;
  n66 -> n45;
  n66 -> n48;
  n66 -> n65;
  n10 [label="arg", xlabel="(10)Cube"];
  n16 [label="arg", xlabel="(16)Cube"];
  n22 [label="arg", xlabel="(22)Cube"];
  n35 [label="1", xlabel="(35)int"];
  n36 [label="dim2", xlabel="(36)int"];
  n40 [label="acc2 : Boolean", xlabel="(40)Boolean"];
  n39 [label="true", xlabel="(39)Boolean"];
  n44 [label="Sequence{ node(42) .. node(43) }", xlabel="(44)int"];
  n44 -> n42;
  n44 -> n43;
  n45 [label="it3 : int", xlabel="(45)int"];
  n48 [label="=", xlabel="(48)Boolean"];
  n48 -> n47;
  n48 -> n46;
  n65 [label="=", xlabel="(65)Boolean"];
  n65 -> n53;
  n65 -> n64;
  n42 [label="1", xlabel="(42)int"];
  n43 [label="dim3", xlabel="(43)int"];
  n47 [label="acc3 : Boolean", xlabel="(47)Boolean"];
  n46 [label="true", xlabel="(46)Boolean"];
  n53 [label="result.data[it][it2][it3]", xlabel="(53)int"];
  n53 -> n49;
  n53 -> n50;
  n53 -> n51;
  n53 -> n52;
  n64 [label="+", xlabel="(64)int"];
  n64 -> n58;
  n64 -> n63;
  n49 [label="result", xlabel="(49)Cube"];
  n50 [label="it", xlabel="(50)int"];
  n51 [label="it2", xlabel="(51)int"];
  n52 [label="it3", xlabel="(52)int"];
  n58 [label="self.data[it][it2][it3]", xlabel="(58)int"];
  n58 -> n54;
  n58 -> n55;
  n58 -> n56;
  n58 -> n57;
  n63 [label="arg.data[it][it2][it3]", xlabel="(63)int"];
  n63 -> n59;
  n63 -> n60;
  n63 -> n61;
  n63 -> n62;
  n54 [label="self", xlabel="(54)Cube"];
  n55 [label="it", xlabel="(55)int"];
  n56 [label="it2", xlabel="(56)int"];
  n57 [label="it3", xlabel="(57)int"];
  n59 [label="arg", xlabel="(59)Cube"];
  n60 [label="it", xlabel="(60)int"];
  n61 [label="it2", xlabel="(61)int"];
  n62 [label="it3", xlabel="(62)int"];
}
