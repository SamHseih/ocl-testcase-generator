package DynamicFixedsizedArrays

	context MultiDimArray
	inv IllegalDimensionException: 
		dimension > 0  and dimensionSizes->size() = dimension 
	inv IllegalTotalSizeException: 
		elements->size() = dimensionSizes->iterate(size:int; result:int = 1| result * size ) 
	inv IllegalDimensionSizeException:
		dimensionSizes->iterate(size:int; result:Boolean = true | result and size>0)
	
	context MultiDimArray::MultiDimArray(dimension:int, dimensionSizes:int[], inputArray:int[])
		post:
			self.dimension = dimension  and  self.dimensionSizes = dimensionSizes and  self.elements = inputArray
	
	context MultiDimArray::add(arg:MultiDimArray):MultiDimArray
		pre IllegalDimensionException:
			arg.dimension = self.dimension  and  arg.dimensionSizes = self.dimensionSizes
		post:
			let length:int = 
					dimensionSizes->iterate(i:int; result:int = 1 | result*i) 
			in	
				Sequence{0..length}->iterate(index:int; check:Boolean = true |
					result = self.elements[index] + arg.elements[index] )
			
	context MultiDimArray::update(value:int , indices:int[])
		pre IllegalArgumentException:
			indices->size() = dimensionSizes->size() and 
			Sequence{0..dimension-1}->iterate( i:int; result:Boolean = true | 
				result and indices[i] >= 0 and indices[i] < dimensionSizes[i] )
		post:
			let index:int = indices->flatindex(self.dimensionSizes)
				in elements[index] = value
				
	context MultiDimArray::retrieve(indices:int[]):int
		pre IllegalArgumentException:
			indices->size() = dimensionSizes->size() and 
			Sequence{0..dimension-1}->iterate(i:int; result:Boolean = true | 
				result and indices[i] >= 0 and indices[i] < dimensionSizes[i] )
		post:
			let index:int = indices->flatindex(self.dimensionSizes)
				in 	result = elements[index]
	
	context MultiDimArray::getDimension():int
		post:
			result = dimension
		 
	context MultiDimArray::getDimensionSizes():int[]
		post:
			result = dimensionSizes

endpackage 